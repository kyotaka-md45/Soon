const { cmd } = require('../command');

// Stockage simul√© en m√©moire pour les niveaux des utilisateurs
const userLevels = {};

// Fonction pour calculer le niveau en fonction de l'XP
const calculateLevel = (xp) => Math.floor(0.1 * Math.sqrt(xp));

cmd({
    pattern: "rank",  // Conserve "rank"
    desc: "V√©rifie le niveau d'un utilisateur.",
    react: "üìä",
    category: "utilitaire",
    use: ".rank [@mention ou r√©ponse]",
    filename: __filename,
}, async (conn, mek, m, { reply, isGroup, mentionedJid }) => {
    try {
        let target;

        // D√©terminer l'utilisateur cibl√©
        // Cas 1 : Si une mention est pr√©sente, utiliser l'utilisateur mentionn√©.
        if (mentionedJid?.length > 0) {
            target = mentionedJid[0]; // Premier utilisateur mentionn√©
        } 
        // Cas 2 : Si l'utilisateur r√©pond √† un message, utiliser l'exp√©diteur du message cit√©.
        else if (m.quoted && m.quoted.sender) {
            target = m.quoted.sender; // Utilisateur ayant envoy√© le message cit√©
        } 
        // Cas 3 : Si ni mention ni r√©ponse, utiliser l'exp√©diteur de la commande.
        else {
            target = m.sender; // Par d√©faut, l'exp√©diteur
        }

        if (!target) {
            return reply("‚ùå Veuillez mentionner un utilisateur ou r√©pondre √† son message pour v√©rifier son rang.");
        }

        // Initialiser les donn√©es de l'utilisateur si elles n'existent pas
        if (!userLevels[target]) {
            userLevels[target] = { experience: 0, messages: 0 };
        }

        // Simuler un gain d'exp√©rience
        const userData = userLevels[target];
        userData.messages += 1;
        userData.experience += Math.floor(Math.random() * 10) + 5;

        const level = calculateLevel(userData.experience);
        const nextLevelXP = Math.pow((level + 1) / 0.1, 2);
        const currentLevelXP = Math.pow(level / 0.1, 2);
        const progressPercent = Math.floor(((userData.experience - currentLevelXP) / (nextLevelXP - currentLevelXP)) * 100);
        const progressBar = "üü†".repeat(progressPercent / 10) + "üü¢".repeat(10 - progressPercent / 10);

        // URL de l'image pour le classement
        const levelImageURL = "https://files.catbox.moe/rrgoyh.jpeg"; // Remplacez par l'URL de l'image souhait√©e
        
        // Envoyer les informations du rang sous forme de texte et d'image
        const caption = `üìä *Informations sur le Rang*\n\nüë§ *Utilisateur*: @${
            target.split("@")[0]
        }\nüîù *Niveau*: ${level}\nüîÑ *Progression*: ${progressPercent}%\n${progressBar}\nüì© *Messages envoy√©s*: ${
            userData.messages
        }\n‚ú® *XP*: ${userData.experience}\n\n> PHAROUK `;

        // Envoyer l'image et la l√©gende ensemble
        await conn.sendMessage(
            m.chat,
            { image: { url: levelImageURL }, caption, mentions: [target] },
            { quoted: mek }
        );

    } catch (error) {
        console.error("Erreur dans la commande rank :", error);
        reply("‚ùå Une erreur est survenue lors de la r√©cup√©ration du rang. Veuillez r√©essayer.");
    }
});
