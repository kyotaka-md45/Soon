const config = require('../config');
const { cmd, commands } = require('../command');

let stopKickall = false; // Variable pour arr√™ter l'ex√©cution de la commande kickall

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

cmd({
    pattern: "kickall",
    desc: "Expulse tous les membres non-admin du groupe.",
    react: "üß®",
    category: "group",
    filename: __filename,
}, async (conn, mek, m, {
    from,
    quoted,
    isCmd,
    command,
    isGroup,
    sender,
    isAdmins,
    isOwner,
    groupMetadata,
    groupAdmins,
    isBotAdmins,
    reply
}) => {
    try {
        // V√©rifie que la commande est utilis√©e dans un groupe
        if (!isGroup) return reply(`‚ùå Cette commande ne peut √™tre utilis√©e que dans des groupes.`);

        // V√©rifie que l'utilisateur est admin
        if (!isAdmins) return reply(`‚ùå Seuls les admins du groupe peuvent utiliser cette commande.`);

        // V√©rifie que le bot a les privil√®ges d'admin
        if (!isBotAdmins) return reply(`‚ùå J'ai besoin des privil√®ges d'admin pour retirer des membres du groupe.`);

        stopKickall = false; // R√©initialise le drapeau d'arr√™t

        // Envoie un message d'avertissement avant l'ex√©cution
        reply(`‚ö†Ô∏è *Attention !* Tous les membres non-admin seront expuls√©s dans *5 secondes*.\nPour annuler cette op√©ration, tapez *.stop*.`);
        
        // Compte √† rebours avant l'ex√©cution avec possibilit√© d'annuler
        for (let i = 5; i > 0; i--) {
            if (stopKickall) {
                return reply(`‚úÖ *Op√©ration annul√©e.* Aucun membre n'a √©t√© expuls√©.`);
            }
            await delay(1000); // Attendre 1 seconde
        }

        // Filtre des membres non-admin
        const allParticipants = groupMetadata.participants;
        const nonAdminParticipants = allParticipants.filter(member => 
            !groupAdmins.includes(member.id) && member.id !== conn.user.jid
        );

        if (nonAdminParticipants.length === 0) {
            return reply(`‚úÖ Aucun membre non-admin √† expulser.`);
        }

        // Expulse les membres non-admin
        for (let participant of nonAdminParticipants) {
            if (stopKickall) {
                return reply(`‚úÖ *Op√©ration annul√©e.* Certains membres n'ont peut-√™tre pas √©t√© expuls√©s.`);
            }
            await conn.groupParticipantsUpdate(from, [participant.id], "remove")
                .catch(err => console.error(`‚ö†Ô∏è √âchec de l'expulsion de ${participant.id} :`, err));
        }

        // Envoie une confirmation de succ√®s
        reply(`‚úÖ *Succ√®s !* Tous les membres non-admin ont √©t√© expuls√©s du groupe.`);
    } catch (e) {
        console.error('Erreur lors de l\'ex√©cution de kickall :', e);
        reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
    }
});

// Commande pour arr√™ter l'ex√©cution de kickall
cmd({
    pattern: "stop",
    desc: "Arr√™te la commande kickall.",
    react: "‚èπÔ∏è",
    category: "group",
    filename: __filename,
}, async (conn, mek, m, { reply }) => {
    stopKickall = true; // Active le drapeau d'arr√™t
    reply(`‚úÖ *Op√©ration kickall annul√©e.*`);
});

cmd({
    pattern: "kick",
    desc: "Expulse un participant en r√©pondant ou en mentionnant son message.",
    react: "üö™",
    category: "group",
    filename: __filename,
}, async (conn, mek, m, {
    from,
    quoted,
    isGroup,
    sender,
    isAdmins,
    isOwner,
    groupMetadata,
    groupAdmins,
    isBotAdmins,
    reply
}) => {
    try {
        // V√©rifie que la commande est utilis√©e dans un groupe
        if (!isGroup) return reply(`‚ùå Cette commande ne peut √™tre utilis√©e que dans des groupes.`);
        
        // Seuls les admins ou le propri√©taire peuvent utiliser cette commande
        if (!isAdmins && !isOwner) return reply(`‚ùå Seuls les admins du groupe ou le propri√©taire peuvent utiliser cette commande.`);
        
        // V√©rifie que le bot a les privil√®ges d'admin
        if (!isBotAdmins) return reply(`‚ùå J'ai besoin des privil√®ges d'admin pour retirer des membres du groupe.`);
        
        // R√©cup√®re le participant cibl√© via une r√©ponse ou une mention
        let target;
        if (quoted) {
            target = quoted.sender; // Utilise l'exp√©diteur du message cit√©
        } else if (mek.message && mek.message.mentionedJid && mek.message.mentionedJid.length > 0) {
            target = mek.message.mentionedJid[0]; // Utilise le premier identifiant mentionn√©
        }
        
        if (!target) {
            return reply(`‚ùå Veuillez mentionner ou r√©pondre au message du participant √† expulser.`);
        }
        
        // Emp√™che d'expulser un admin ou le bot lui-m√™me
        if (groupAdmins.includes(target) || target === conn.user.jid) {
            return reply(`‚ùå Vous ne pouvez pas expulser un admin ou le bot.`);
        }
        
        // Expulse le participant du groupe
        await conn.groupParticipantsUpdate(from, [target], "remove")
            .catch(err => {
                console.error(`‚ö†Ô∏è √âchec de l'expulsion de ${target} :`, err);
                return reply(`‚ùå Une erreur est survenue lors de la tentative d'expulsion du participant.`);
            });
        
        // Envoie un message de confirmation en cas de succ√®s
        reply(`‚úÖ Succ√®s ! Le participant a √©t√© expuls√© du groupe.`);
    } catch (e) {
        console.error('Erreur lors de l\'ex√©cution de kick :', e);
        reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
    }
});
